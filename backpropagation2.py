import numpy as np

# Parámetros de la red
learning_rate = 0.01  # Tasa de aprendizaje (puedes cambiar este valor)
num_iterations = 100  # Número de iteraciones (puedes cambiar este valor)
desired_output = 15  # Valor deseado para la salida (puedes cambiar este valor)

# Inicialización de los pesos
W13 = -1.12381267    # Peso entre X1 y X3
W23 = 0.1017876  # Peso entre X2 y X3
W14 = -1.22593916   # Peso entre X1 y X4
W24 = -0.50194269   # Peso entre X2 y X4
W35 = -0.77792243     # Peso entre X3 y X5
W45 = -1.27609638 # Peso entre X4 y X5

# Función de activación (sigmoide)
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Función para calcular la salida
def calculate_output(X, weights):
    X3 = (X[0] * weights[0]) + (X[1] * weights[1])
    X4 = (X[0] * weights[2]) + (X[1] * weights[3])
    X5 = (X3 * weights[4]) + (X4 * weights[5])
    return X5

# Función de entrenamiento
def train(X, desired_output, learning_rate, num_iterations):
    global W13, W23, W14, W24, W35, W45
    weights = np.array([W13, W23, W14, W24, W35, W45])

    for _ in range(num_iterations):
        # Propagación hacia adelante
        X3 = (X[0] * weights[0]) + (X[1] * weights[1])
        X4 = (X[0] * weights[2]) + (X[1] * weights[3])
        X5 = (X3 * weights[4]) + (X4 * weights[5])
        
        # Error
        error = desired_output - X5

        # Gradientes
        d_X5 = error
        d_W35 = X3 * d_X5
        d_W45 = X4 * d_X5
        d_X3 = weights[4] * d_X5
        d_X4 = weights[5] * d_X5
        d_W13 = X[0] * d_X3
        d_W23 = X[1] * d_X3
        d_W14 = X[0] * d_X4
        d_W24 = X[1] * d_X4
        
        # Actualización de pesos
        weights[4] += learning_rate * d_W35
        weights[5] += learning_rate * d_W45
        weights[0] += learning_rate * d_W13
        weights[1] += learning_rate * d_W23
        weights[2] += learning_rate * d_W14
        weights[3] += learning_rate * d_W24

    return weights

# Valores de entrada
X = np.array([5, 5])

# Entrenamiento
weights = train(X, desired_output, learning_rate, num_iterations)

# Calcular la salida con los pesos entrenados
output = calculate_output(X, weights)

# Imprimir resultados
print(f"Pesos finales: {weights}")
print(f"Salida final: {output}")






""" 
      ██████╗ ██████╗ ██████╗ ████████╗ ██████╗      ██████╗██╗██████╗  ██████╗██╗   ██╗██╗████████╗ ██████╗ 
    ██╔════╝██╔═══██╗██╔══██╗╚══██╔══╝██╔═══██╗    ██╔════╝██║██╔══██╗██╔════╝██║   ██║██║╚══██╔══╝██╔═══██╗
    ██║     ██║   ██║██████╔╝   ██║   ██║   ██║    ██║     ██║██████╔╝██║     ██║   ██║██║   ██║   ██║   ██║
    ██║     ██║   ██║██╔══██╗   ██║   ██║   ██║    ██║     ██║██╔══██╗██║     ██║   ██║██║   ██║   ██║   ██║
    ╚██████╗╚██████╔╝██║  ██║   ██║   ╚██████╔╝    ╚██████╗██║██║  ██║╚██████╗╚██████╔╝██║   ██║   ╚██████╔╝
     ╚═════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝      ╚═════╝╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═╝   ╚═╝    ╚═════╝ 
 * ============================================================================
 *                      Código Desarrollado por Corto Circuito
 * ============================================================================
 * Desarrollador: Ángel Carrasquedo & johan garcia
 
      
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⠉⠀⠉⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⣄⣀⣶⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠉⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠇⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠼⠯⠤⠤⠤⠿⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⣀⡬⠥⢥⣀⠀⠀⠀⠀⠀⢀⡠⠾⠷⢤⡀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⣾⡇⠀⠀⠀⠀⢀⡾⣋⣄⠀⠈⠉⢶⠀⠀⠀⣴⡟⣁⣀⠀⠀⠙⣆⠀⠀⠀⠀⠀⢸⣅⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠉⠉⢹⡇⠀⠀⠀⠀⢼⣿⣿⣿⣿⣦⡀⢈⡇⠀⠀⣿⣿⣿⣿⣿⡄⠀⣿⠀⠀⠀⠀⠀⢸⡏⠉⢻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⡇⠀⠀⠀⠀⠈⢿⣿⣿⣿⠿⢀⡾⠁⠀⠀⠘⣿⣿⣿⡿⠁⣠⠏⠀⠀⠀⠀⠀⢸⡇⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢀⣴⠾⠷⠾⢶⡄⠀⠀⠀⠉⠛⠷⠒⠋⠀⠀⠀⠀⠀⠈⠙⠛⠒⠊⠁⠀⠀⠀⣠⡶⠶⠾⠷⣦⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⣾⣿⠀⠀⠀⠀⠙⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠋⠀⠀⠀⢠⣿⣸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⠀⠀⠀⠀⠀⠀⠛⣦⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⠞⠋⠀⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠋⠛⢻⣿⣿⡛⠛⠛⠛⠛⢻⣿⣿⣽⣭⣭⣭⣭⣭⣭⣿⣟⠋⠟⠛⢛⣿⣿⡟⠉⠉⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠋⠀⣤⣭⣿⣤⣤⣤⣼⣯⣤⣴⣤⣤⣦⣤⣤⣤⣤⣿⣦⣤⣾⣯⣥⣆⠉⠛⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⣿⣠⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⢿⡷⢶⡄⣿⠀⠀⠘⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⣿⣼⠀⠀⠀⢲⡆⠀⠀⠀⠀⠀⠀⠀⠀⣤⠄⠀⠀⠀⠀⢬⡇⢸⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠏⢳⣄⠀⢀⣿⣿⠀⠀⢠⡾⡇⠀⡀⠀⠀⠀⠀⠀⢰⣿⠀⠀⠀⠀⠀⣿⣿⣼⠀⢀⡼⠛⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠃⠀⠀⠉⢻⣿⣿⣿⠀⠀⣼⠇⢿⣴⣷⠀⠀⠀⠀⣠⣾⣿⣄⣿⡄⠀⠀⢹⣿⣿⣟⠋⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣇⠀⠀⠀⢰⡟⠉⣿⢻⠷⠶⠿⠀⠸⠏⠘⣦⠀⡿⠒⠛⠃⢸⣿⡟⠿⠿⠷⠿⡟⣿⠹⣆⠀⠀⠀⢈⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠉⠓⢶⣴⠟⠁⠀⣿⣼⠀⠀⠀⠀⠀⠀⠀⠹⣾⠁⠀⠀⠀⠈⢿⠀⠀⠀⠀⢀⡇⣿⠀⠘⣷⣴⠖⠉⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣤⡀⢠⡾⠃⠀⠀⠀⣿⢹⠀⠀⠀⠀⠀⠀⠀⠀⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⣧⣿⠀⠀⠈⢻⣄⠀⣠⣼⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣴⡏⠀⠀⠈⠻⣿⠁⠀⠀⠀⢀⣿⠘⢿⣿⡿⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⢿⣿⠟⠫⣽⠀⠀⠀⠀⣹⡟⠁⠀⠀⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣴⡾⠿⠟⢻⡄⠀⠀⠀⢰⡿⠀⠀⠀⠀⠘⣿⣶⡾⠉⢻⣤⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣠⡞⠉⠳⣶⣿⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⣸⡟⠲⠶⣦⡀⠀⠀⠀
⠀⢀⡾⠋⠀⠀⠀⠈⠳⣦⣤⡴⠟⠀⠀⠀⠀⠀⢈⣿⠈⢷⣤⡾⠏⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⢿⣷⡾⠛⣿⠀⠀⠀⠀⠀⠙⢦⣤⣤⠴⠋⠁⠀⠀⠀⠻⣄⠀⠀
⣤⡟⠀⠀⣤⢦⣀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠸⣿⣄⣤⣷⣤⣤⣤⣴⣼⣧⣶⣴⣦⣦⣤⣤⣤⣤⣤⣤⣦⣤⣠⣿⠀⠀⠀⠀⠀⠀⠀⣼⠁⠀⠀⢀⣴⢦⡀⠀⠹⣦⠀
⣿⡀⢠⠞⠁⢀⣽⠇⠀⣠⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⣾⠋⠀⠀⠀⠀⠀⠀⠈⣿⡀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⣻⡄⠀⠀⠀⠀⠀⠀⠀⠻⣄⠀⠀⢿⡀⠀⠻⣄⠀⣿⡃
⠈⣷⠏⠀⣠⡿⠁⠀⣰⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⠤⠤⠤⠤⠤⠤⢾⣟⠁⠀⢈⡷⠦⠦⠤⠤⠤⠤⠶⣏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⣧⠀⠀⠹⣆⠀⠈⣷⠏⠀
⠀⠀⠀⢴⣯⣤⣤⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡁⠀⠀⠀⠀⠀⠀⠀⣽⠶⠚⢿⡅⠀⠀⠀⠀⠀⠀⠀⣽⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢦⣤⣬⣷⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠟⠛⠛⠛⠛⠛⠛⠻⢯⣄⠀⣤⠟⠛⠛⠛⠛⠛⠛⠻⣧⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣄⣀⣀⣀⣠⣤⣤⣤⣿⠟⠈⠻⣦⣀⣀⣀⣀⣀⣀⣠⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⠯⠿⠿⠭⢯⣉⣉⣉⣿⡀⠠⣾⣏⣀⣀⡠⠶⠶⠿⠿⠷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠞⠋⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⠀⠀⣿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣄⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣟⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⡷⠀⣿⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀⠀⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀
 """