import numpy as np

# Valores de entrada
X = np.array([2, 3])

# Pesos (inicializados)
W13 = 0.5442155577952353
W23 = 0.8908211478460626
W14 = 1.1418145014469079
W24 = 0.6464056750520548
W35 = 1.1568879626186972
W45 = 1.3377391262533245

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return sigmoid(x) * (1 - sigmoid(x))

# Definir el número de iteraciones y la tasa de aprendizaje
num_iterations = 50  # Puedes cambiar este valor según lo desees
learning_rate = 0.01
desired_output = 10  # Suponemos que queremos que X5 sea 1

# Entrenamiento del modelo
for iteration in range(num_iterations):
    # Cálculo de X3 y X4
    X3 = sigmoid((X[0] * W13) + (X[1] * W23))
    X4 = sigmoid((X[0] * W14) + (X[1] * W24))
    
    # Cálculo de X5
    X5 = sigmoid((X3 * W35) + (X4 * W45))
    
    # Error de salida
    error = desired_output - X5
    
    # Cálculo del gradiente de la función de pérdida
    output_error_term = error * sigmoid_derivative(X5)
    
    # Gradientes para la capa oculta
    W35_gradient = X3 * output_error_term
    W45_gradient = X4 * output_error_term
    
    # Error en la capa oculta
    hidden_layer_error_X3 = output_error_term * W35 * sigmoid_derivative(X3)
    hidden_layer_error_X4 = output_error_term * W45 * sigmoid_derivative(X4)
    
    W13_gradient = X[0] * hidden_layer_error_X3
    W23_gradient = X[1] * hidden_layer_error_X3
    
    W14_gradient = X[0] * hidden_layer_error_X4
    W24_gradient = X[1] * hidden_layer_error_X4
    
    # Actualización de los pesos
    W35 += learning_rate * W35_gradient
    W45 += learning_rate * W45_gradient
    W13 += learning_rate * W13_gradient
    W23 += learning_rate * W23_gradient
    W14 += learning_rate * W14_gradient
    W24 += learning_rate * W24_gradient
    
    # Mostrar resultados en cada iteración
    print(f"Iteración {iteration + 1}:")
    print(f"  X3 = {X3:.4f}")
    print(f"  X4 = {X4:.4f}")
    print(f"  X5 = {X5:.4f}")
    print(f"  W13 = {W13:.4f}")
    print(f"  W23 = {W23:.4f}")
    print(f"  W14 = {W14:.4f}")
    print(f"  W24 = {W24:.4f}")
    print(f"  W35 = {W35:.4f}")
    print(f"  W45 = {W45:.4f}")
    print()

print("Entrenamiento finalizado.")
print(f"Peso final W13 = {W13:.4f}")
print(f"Peso final W23 = {W23:.4f}")
print(f"Peso final W14 = {W14:.4f}")
print(f"Peso final W24 = {W24:.4f}")
print(f"Peso final W35 = {W35:.4f}")
print(f"Peso final W45 = {W45:.4f}")
print(f"  X5 = {X5:.4f}")




""" 
      ██████╗ ██████╗ ██████╗ ████████╗ ██████╗      ██████╗██╗██████╗  ██████╗██╗   ██╗██╗████████╗ ██████╗ 
    ██╔════╝██╔═══██╗██╔══██╗╚══██╔══╝██╔═══██╗    ██╔════╝██║██╔══██╗██╔════╝██║   ██║██║╚══██╔══╝██╔═══██╗
    ██║     ██║   ██║██████╔╝   ██║   ██║   ██║    ██║     ██║██████╔╝██║     ██║   ██║██║   ██║   ██║   ██║
    ██║     ██║   ██║██╔══██╗   ██║   ██║   ██║    ██║     ██║██╔══██╗██║     ██║   ██║██║   ██║   ██║   ██║
    ╚██████╗╚██████╔╝██║  ██║   ██║   ╚██████╔╝    ╚██████╗██║██║  ██║╚██████╗╚██████╔╝██║   ██║   ╚██████╔╝
     ╚═════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝    ╚═════╝      ╚═════╝╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚═╝   ╚═╝    ╚═════╝ 
 * ============================================================================
 *                      Código Desarrollado por Corto Circuito
 * ============================================================================
 * Desarrollador: Ángel Carrasquedo & johan garcia
 
      
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡿⠉⠀⠉⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⣄⣀⣶⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠉⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠇⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠼⠯⠤⠤⠤⠿⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⢤⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⣀⡬⠥⢥⣀⠀⠀⠀⠀⠀⢀⡠⠾⠷⢤⡀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⣾⡇⠀⠀⠀⠀⢀⡾⣋⣄⠀⠈⠉⢶⠀⠀⠀⣴⡟⣁⣀⠀⠀⠙⣆⠀⠀⠀⠀⠀⢸⣅⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠉⠉⢹⡇⠀⠀⠀⠀⢼⣿⣿⣿⣿⣦⡀⢈⡇⠀⠀⣿⣿⣿⣿⣿⡄⠀⣿⠀⠀⠀⠀⠀⢸⡏⠉⢻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⡇⠀⠀⠀⠀⠈⢿⣿⣿⣿⠿⢀⡾⠁⠀⠀⠘⣿⣿⣿⡿⠁⣠⠏⠀⠀⠀⠀⠀⢸⡇⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢀⣴⠾⠷⠾⢶⡄⠀⠀⠀⠉⠛⠷⠒⠋⠀⠀⠀⠀⠀⠈⠙⠛⠒⠊⠁⠀⠀⠀⣠⡶⠶⠾⠷⣦⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⣾⣿⠀⠀⠀⠀⠙⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠋⠀⠀⠀⢠⣿⣸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⠀⠀⠀⠀⠀⠀⠛⣦⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⣤⠞⠋⠀⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠋⠛⢻⣿⣿⡛⠛⠛⠛⠛⢻⣿⣿⣽⣭⣭⣭⣭⣭⣭⣿⣟⠋⠟⠛⢛⣿⣿⡟⠉⠉⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠋⠀⣤⣭⣿⣤⣤⣤⣼⣯⣤⣴⣤⣤⣦⣤⣤⣤⣤⣿⣦⣤⣾⣯⣥⣆⠉⠛⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⣿⣠⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⠶⢿⡷⢶⡄⣿⠀⠀⠘⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⣿⣼⠀⠀⠀⢲⡆⠀⠀⠀⠀⠀⠀⠀⠀⣤⠄⠀⠀⠀⠀⢬⡇⢸⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠏⢳⣄⠀⢀⣿⣿⠀⠀⢠⡾⡇⠀⡀⠀⠀⠀⠀⠀⢰⣿⠀⠀⠀⠀⠀⣿⣿⣼⠀⢀⡼⠛⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠃⠀⠀⠉⢻⣿⣿⣿⠀⠀⣼⠇⢿⣴⣷⠀⠀⠀⠀⣠⣾⣿⣄⣿⡄⠀⠀⢹⣿⣿⣟⠋⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣇⠀⠀⠀⢰⡟⠉⣿⢻⠷⠶⠿⠀⠸⠏⠘⣦⠀⡿⠒⠛⠃⢸⣿⡟⠿⠿⠷⠿⡟⣿⠹⣆⠀⠀⠀⢈⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠉⠓⢶⣴⠟⠁⠀⣿⣼⠀⠀⠀⠀⠀⠀⠀⠹⣾⠁⠀⠀⠀⠈⢿⠀⠀⠀⠀⢀⡇⣿⠀⠘⣷⣴⠖⠉⠙⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣤⡀⢠⡾⠃⠀⠀⠀⣿⢹⠀⠀⠀⠀⠀⠀⠀⠀⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⣧⣿⠀⠀⠈⢻⣄⠀⣠⣼⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⣴⡏⠀⠀⠈⠻⣿⠁⠀⠀⠀⢀⣿⠘⢿⣿⡿⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⢿⣿⠟⠫⣽⠀⠀⠀⠀⣹⡟⠁⠀⠀⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣴⡾⠿⠟⢻⡄⠀⠀⠀⢰⡿⠀⠀⠀⠀⠘⣿⣶⡾⠉⢻⣤⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣠⡞⠉⠳⣶⣿⠀⠀⠀⠀⠈⣇⠀⠀⠀⠀⣸⡟⠲⠶⣦⡀⠀⠀⠀
⠀⢀⡾⠋⠀⠀⠀⠈⠳⣦⣤⡴⠟⠀⠀⠀⠀⠀⢈⣿⠈⢷⣤⡾⠏⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⢿⣷⡾⠛⣿⠀⠀⠀⠀⠀⠙⢦⣤⣤⠴⠋⠁⠀⠀⠀⠻⣄⠀⠀
⣤⡟⠀⠀⣤⢦⣀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠸⣿⣄⣤⣷⣤⣤⣤⣴⣼⣧⣶⣴⣦⣦⣤⣤⣤⣤⣤⣤⣦⣤⣠⣿⠀⠀⠀⠀⠀⠀⠀⣼⠁⠀⠀⢀⣴⢦⡀⠀⠹⣦⠀
⣿⡀⢠⠞⠁⢀⣽⠇⠀⣠⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⣾⠋⠀⠀⠀⠀⠀⠀⠈⣿⡀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⣻⡄⠀⠀⠀⠀⠀⠀⠀⠻⣄⠀⠀⢿⡀⠀⠻⣄⠀⣿⡃
⠈⣷⠏⠀⣠⡿⠁⠀⣰⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⠤⠤⠤⠤⠤⠤⢾⣟⠁⠀⢈⡷⠦⠦⠤⠤⠤⠤⠶⣏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠙⣧⠀⠀⠹⣆⠀⠈⣷⠏⠀
⠀⠀⠀⢴⣯⣤⣤⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡁⠀⠀⠀⠀⠀⠀⠀⣽⠶⠚⢿⡅⠀⠀⠀⠀⠀⠀⠀⣽⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⢦⣤⣬⣷⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠟⠛⠛⠛⠛⠛⠛⠻⢯⣄⠀⣤⠟⠛⠛⠛⠛⠛⠛⠻⣧⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣄⣀⣀⣀⣠⣤⣤⣤⣿⠟⠈⠻⣦⣀⣀⣀⣀⣀⣀⣠⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⠯⠿⠿⠭⢯⣉⣉⣉⣿⡀⠠⣾⣏⣀⣀⡠⠶⠶⠿⠿⠷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠞⠋⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⠀⠀⣿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣄⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣟⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣸⡷⠀⣿⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀⠀⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀
 """